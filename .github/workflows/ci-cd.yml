name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_image:
        description: 'Build Docker image?'
        required: false
        default: 'true'
      operation:
        description: 'install | uninstall | reinstall'
        required: false
        default: 'reinstall'

env:
  REGISTRY:       ghcr.io/kuba088fr
  IMAGE_NAME:     discord-film-bot
  # sekrety z GitHub Secrets
  DISCORD_TOKEN:   ${{ secrets.DISCORD_TOKEN }}
  TMDB_API_KEY:    ${{ secrets.TMDB_API_KEY }}
  MYSQL_HOST:      ${{ secrets.MYSQL_HOST }}
  MYSQL_DATABASE:  ${{ secrets.MYSQL_DATABASE }}
  MYSQL_USER:      ${{ secrets.MYSQL_USER }}
  MYSQL_PASSWORD:  ${{ secrets.MYSQL_PASSWORD }}

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: src     # dzięki temu 'src/' działa jako moduł
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --no-cache-dir -r requirements.txt
          pip install --no-cache-dir pytest pytest-asyncio black

      - name: Lint
        run: black --check .

      - name: Run tests
        run: pytest --maxfail=1 --disable-warnings -q

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build Docker image
        run: docker build -t $REGISTRY/$IMAGE_NAME:latest .

      - name: Log in to registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image
        run: docker push $REGISTRY/$IMAGE_NAME:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy via SSH
        run: |
          ssh user@server "cd /path/to/project && \
            docker-compose pull && \
            docker-compose up -d"
